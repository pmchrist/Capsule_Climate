

"""
CMDATA - DATA STRUCT FOR CONSUMER MARKET DATA
"""

"""
Mutable struct that holds the data structures used to save data from the consumer
    market process.
"""
@with_kw mutable struct CMData
    n_hh::Int
    n_cp::Int

    true_D::Matrix{Float64} = spzeros(Float64, n_hh, n_cp)
    all_C::Vector{Float64} = zeros(Float64, n_hh)               # Monetary capacity of hh
    all_N::Vector{Float64} = zeros(Float64, n_cp)               # Monetary capacity of cp, i.e. How much they can sell in $ (inventory*price)
    all_Sust_Score::Vector{Float64} = zeros(Float64, n_hh)      # How much emissions bother a hh (for consumption decision)

    sold_per_hh::Vector{Float64} = spzeros(Float64, n_hh)
    sold_per_hh_round::Vector{Float64} = zeros(Float64, n_hh)
    sold_per_cp::Vector{Float64} = zeros(Float64, n_cp)
    sold_per_cp_round::Vector{Float64} = zeros(Float64, n_cp)

    weights::Matrix{Float64} = spzeros(Float64, n_hh, n_cp)
    weights_sum::Vector{Float64} = zeros(Float64, n_hh)

    transactions::Matrix{Float64} = spzeros(Float64, n_hh, n_cp)
    frac_sellable::Vector{Float64} = ones(Float64, n_cp)
    C_spread::Matrix{Float64} = spzeros(Float64, n_hh, n_cp)
    demand_per_cp::Vector{Float64} = zeros(Float64, n_cp)
end


"""
Resets fields in cm data struct before cm market process is initiated
"""
function reset_matrices_cp!(
    cmdata::CMData,
    all_hh::Vector{Int},
    all_cp::Vector{Int},
    model::ABM
    )

    # CP variables

    all_N_goods = map(cp_id -> model[cp_id].N_goods, minimum(all_cp):maximum(all_cp))       # Inventory Size

    # Set to order of small to large id (minimum(all_cp):max(all_cp)
    all_p = map(cp_id -> model[cp_id].p[end], minimum(all_cp):maximum(all_cp))              # Last Price
    norm_p = all_p ./ maximum(all_p)                                                        # Normalized Prices (Maybe we need MINMAX? Not just percentage from top value)
    #println(var(all_p) / mean(all_p))                                                      # Dispersion of prices
    if maximum(all_p) <= 0
        # Should never happen
        println("WARNING: Price is zero or negative")
    end

    # Emission aware value of good
    emiss_per_good = map(cp_id -> model[cp_id].emissions_per_item[end], minimum(all_cp):maximum(all_cp))    # Last Emissions
    #println(var(emiss_per_good) / mean(emiss_per_good))                                               # Dispersion of emissions
    if maximum(emiss_per_good) > 1e-8      # If there were some emissions in the last step (is not just zero, to avoid possible numerical error in inversion)
        norm_emiss_per_good = emiss_per_good ./ maximum(emiss_per_good)
    else
        norm_emiss_per_good = fill(0.0, length(emiss_per_good))
    end

    # price_score = []
    # env_score = []

    @inbounds for (i,hh_id) âˆˆ enumerate(minimum(all_hh):maximum(all_hh))

        # HH Variables
        cmdata.all_C[i] = model[hh_id].C        # C is budget, C for Capacity of HH
        cmdata.all_Sust_Score[i] = model[hh_id].Sust_Score
        cmdata.weights[i,:] .= 0.0

        # For each household there is a list of cp, we need to assign preferences in weights (shapr(i:hh, j:cp))
        for cp_id in model[hh_id].cp

            # cp are initiated after hh and cp_id will thus correspond to col + len(hh), 
            # so subtract len(hh) to get index
            j = cp_id - length(all_hh)

            cmdata.all_N[j] = all_N_goods[j] * all_p[j]     # Maximum amount of money that can be generated by cp (how much can be sold)

            # # Cobb Douglas utility Price vs Emissions
            # # NOTE: Had a problem with simple Cobb Douglas, when emiss is 0 (no production) the emission part went to zero making weight 0, which is incorrect (0^0.3=0)
            # price_part = norm_p[j] ^ (1-cmdata.all_Sust_Score[i])           # Normalized Price is used
            # emiss_part = emiss_per_good[j] ^ cmdata.all_Sust_Score[i]       # Normalized emissions produced per good is used
            # cmdata.weights[i,j] = (price_part * emiss_part) ^ -1            # We return inverse, as these are weights for the decision process

            # Simplest solution is to use the Linear Combination utility Price and Emissions
            price_part = norm_p[j] * (1-cmdata.all_Sust_Score[i])               # Normalized Price is used
            emiss_part = norm_emiss_per_good[j] * cmdata.all_Sust_Score[i]      # Normalized emissions produced per good is used

            # SO, THE ISSUE IS COMPLEX, IN THE BEGINNING THERE IS NO PRODUCTION AND AS A RESULT NO EMISSIONS
            # BUT IF SUST_SCORE IS 1 WE ONLY USE EMISSIONS AND GET DIVISION BY ZERO. IF WE JUST ASSIGN ZERO
            # IT DEFEATS PURPOSE AS CONSUMER FOLLOWS LOWEST EMISSION, AND IT IS ZERO, WEIGHT SHOULD BE ANYTHING BUT ZERO
            # BEST TACTIC IS TO JUST GO BACK TO PRICE, FOR NOW
            if (emiss_part != 0)
                cmdata.weights[i,j] = (price_part + emiss_part) ^ -1            # We return inverse, as these are weights for the decision process
            else
                cmdata.weights[i,j] = norm_p[j] ^ -1
            end
            # push!(price_score, price_part)
            # push!(env_score, emiss_part)

            if (isnan(cmdata.weights[i,j]) || (cmdata.weights[i,j] <= 1e-3) || (cmdata.weights[i,j] == Inf) || (cmdata.weights[i,j] == -Inf))
                # Should never happen
                println("Incorrect Weight: ", cmdata.all_Sust_Score[i])
            end
        end
    end

    # println("Price Utility Value: ", mean(price_score))
    # println("Sustainability Utility Value: ", mean(env_score))

    cmdata.transactions .= 0.0
end


"""
GINIDATA - DATA STRUCT FOR CONSUMER MARKET DATA
"""

"""
Struct that holds intermediate data for GINI computations
"""
@with_kw mutable struct GINIData{D}
    I::Matrix{Float64} = Matrix{Float64}(undef, D, D)
    W::Matrix{Float64} = Matrix{Float64}(undef, D, D)
end